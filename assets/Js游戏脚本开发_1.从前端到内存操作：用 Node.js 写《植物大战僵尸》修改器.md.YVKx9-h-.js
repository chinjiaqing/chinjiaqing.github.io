import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.Ds6Eueu6.js";const l="/memory/demo.png",t="/memory/qq.jpg",y=JSON.parse('{"title":"🧠 从前端到内存操作：用 Node.js 写《植物大战僵尸》修改器","description":"","frontmatter":{},"headers":[],"relativePath":"Js游戏脚本开发/1.从前端到内存操作：用 Node.js 写《植物大战僵尸》修改器.md","filePath":"Js游戏脚本开发/1.从前端到内存操作：用 Node.js 写《植物大战僵尸》修改器.md"}'),e={name:"Js游戏脚本开发/1.从前端到内存操作：用 Node.js 写《植物大战僵尸》修改器.md"};function p(k,s,r,d,E,o){return n(),a("div",null,s[0]||(s[0]=[h('<h1 id="🧠-从前端到内存操作-用-node-js-写《植物大战僵尸》修改器" tabindex="-1">🧠 从前端到内存操作：用 Node.js 写《植物大战僵尸》修改器 <a class="header-anchor" href="#🧠-从前端到内存操作-用-node-js-写《植物大战僵尸》修改器" aria-label="Permalink to &quot;🧠 从前端到内存操作：用 Node.js 写《植物大战僵尸》修改器&quot;">​</a></h1><blockquote><p>谁说前端只能玩页面交互？</p></blockquote><blockquote><p>本文将带你用 <code>Node.js</code> + <a href="https://www.npmjs.com/package/memoryjs" target="_blank" rel="noreferrer"><code>memoryjs</code></a> 操作经典游戏《植物大战僵尸》的内存，修改阳光值、让植物种植无冷却。</p></blockquote><blockquote><p>不需要 C++，不需要驱动，只要你会 JS，就能一行一行“控制游戏”，轻松写出专属游戏辅助脚本。</p></blockquote><hr><h2 id="🌱-为什么选择-node-js-memoryjs" tabindex="-1">🌱 为什么选择 Node.js + memoryjs？ <a class="header-anchor" href="#🌱-为什么选择-node-js-memoryjs" aria-label="Permalink to &quot;🌱 为什么选择 Node.js + memoryjs？&quot;">​</a></h2><p>作者作为一名切图仔，不会C++，不会Lua，只会一点易语言。但使用易语言编写脚本时，总感觉蹩脚得很。那么Nodejs能不能写脚本呢？ 经过我多方打听，终于找到 <code>memoryjs</code> 这个库，提供了对 Windows 下进程、模块、内存读写的封装：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> memoryjs</span></span></code></pre></div><p>推荐使用最新封装编译版本:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> memoryprocess</span></span></code></pre></div><p>搭配 Electron，你甚至可以给它做个 UI。</p><p><img src="'+l+`" alt="预览图"></p><hr><h2 id="🎮-项目目标" tabindex="-1">🎮 项目目标 <a class="header-anchor" href="#🎮-项目目标" aria-label="Permalink to &quot;🎮 项目目标&quot;">​</a></h2><p>我们以《植物大战僵尸》为例，实现：</p><ol><li>实时修改阳光值</li><li>一键开启/关闭无冷却</li><li>Electron实现UI</li></ol><hr><h2 id="🏗️-基础准备-打开游戏进程" tabindex="-1">🏗️ 基础准备：打开游戏进程 <a class="header-anchor" href="#🏗️-基础准备-打开游戏进程" aria-label="Permalink to &quot;🏗️ 基础准备：打开游戏进程&quot;">​</a></h2><p>首先我们要“定位游戏进程”并获取它的内存句柄（Handle）：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> memoryJs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;memoryjs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GameExeName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;PlantsVsZombies.exe&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getGameProcessHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memoryJs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GameExeName)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请先打开游戏&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> process</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>调用 <code>openProcess</code> 会返回目标进程的 ID、句柄等信息，后续所有内存读写都依赖它。</p><hr><h2 id="🧩-结构分析-找到目标地址" tabindex="-1">🧩 结构分析：找到目标地址 <a class="header-anchor" href="#🧩-结构分析-找到目标地址" aria-label="Permalink to &quot;🧩 结构分析：找到目标地址&quot;">​</a></h2><p>游戏的数据（比如阳光值）并不是固定地址，而是通过 <strong>模块基地址 + 偏移链</strong> 来定位的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 获取模块基地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getModuleBaseAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">moduleName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GameExeName) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memoryJs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.th32ProcessID)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mod</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> modules.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m.szModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moduleName)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mod?.modBaseAddr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 计算偏移后的地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">baseAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">offsets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memoryJs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.handle, baseAddr, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dword&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offsets.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memoryJs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.handle, addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offsets[i], </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dword&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offsets[offsets.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="🌞-示例一-设置阳光值" tabindex="-1">🌞 示例一：设置阳光值 <a class="header-anchor" href="#🌞-示例一-设置阳光值" aria-label="Permalink to &quot;🌞 示例一：设置阳光值&quot;">​</a></h2><p>通过配置管理偏移结构：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 关卡阳光的基地址为：[[[Game.exe + 0x2a9f38] + 0x768] + 0x5560]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GameConfig</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    set_sunshine: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        baseOffset: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x2a9f38</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例如 Game.exe + 0x2a9f38</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        offsets: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x768</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x5560</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//两次偏移，分别是 0x768,0x5560</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dword&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 设置阳光值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Game_SetSunshine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 先获取进程句柄</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getGameProcessHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取进程模块基地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getModuleBaseAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 获取阳光的地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> addr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        process,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GameConfig.set_sunshine.baseOffset,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        GameConfig.set_sunshine.offsets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 向这个内存地址写入新的阳光值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    memoryJs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.handle, addr, value, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dword&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 关闭进程句柄</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    memoryJs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.handle)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>👆 运行 <code>Game_SetSunshine(9999)</code> 就能瞬间让你财大气粗！</p><hr><h2 id="❄️-示例二-开启无冷却" tabindex="-1">❄️ 示例二：开启无冷却 <a class="header-anchor" href="#❄️-示例二-开启无冷却" aria-label="Permalink to &quot;❄️ 示例二：开启无冷却&quot;">​</a></h2><p>相较于修改阳光值，无冷却功能需要我们覆盖游戏某段指令(即修改源代码)，通过写入汇编字节实现功能开启：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Game_SetCoolDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getGameProcessHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> addr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getModuleBaseAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x87296</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 冷却相关地址</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // addr 便是存储判断冷却的相关代码。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 原代码是 0x7E 0x14 --&gt; 修改为 0x7F 0x14</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其实就是将判断冷却时间的代码中的 \`Jle\` 改为了 \`Jg\`: \`小于等于\` -&gt; \`大于\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> newBytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> open </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x7f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x7e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    memoryJs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.handle, addr, newBytes)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    memoryJs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.handle)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="🧠-示例三-读取阳光值" tabindex="-1">🧠 示例三：读取阳光值 <a class="header-anchor" href="#🧠-示例三-读取阳光值" aria-label="Permalink to &quot;🧠 示例三：读取阳光值&quot;">​</a></h2><p>你甚至可以把这个值实时展示到 UI（比如 Electron 界面）中：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Game_GetSunshine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> process</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getGameProcessHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getModuleBaseAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> addr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resolveAddr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        process,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        base </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GameConfig.set_sunshine.baseOffset,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        GameConfig.set_sunshine.offsets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> memoryJs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.handle, addr, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dword&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    memoryJs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">closeHandle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(process.handle)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="📁-最佳实践-配合electron提供操作ui界面" tabindex="-1">📁 最佳实践：配合Electron提供操作UI界面 <a class="header-anchor" href="#📁-最佳实践-配合electron提供操作ui界面" aria-label="Permalink to &quot;📁 最佳实践：配合Electron提供操作UI界面&quot;">​</a></h2><ul><li><a href="https://electron-vite.github.io/" target="_blank" rel="noreferrer">https://electron-vite.github.io/</a></li><li><a href="https://github.com/JoShMiQueL/memoryprocess" target="_blank" rel="noreferrer">https://github.com/JoShMiQueL/memoryprocess</a></li><li><a href="https://github.com/Rob--/memoryjs" target="_blank" rel="noreferrer">https://github.com/Rob--/memoryjs</a></li></ul><hr><h2 id="⚠️-注意事项" tabindex="-1">⚠️ 注意事项 <a class="header-anchor" href="#⚠️-注意事项" aria-label="Permalink to &quot;⚠️ 注意事项&quot;">​</a></h2><ul><li><strong>必须以管理员权限运行 Node 脚本</strong>，否则无法访问游戏内存</li><li>确保你找到的偏移是当前版本可用的（可配合 Cheat Engine 分析）</li><li>这是纯学习研究项目，请勿用于非法用途</li></ul><hr><h2 id="🧩-后续拓展方向-欢迎关注" tabindex="-1">🧩 后续拓展方向，欢迎关注 <a class="header-anchor" href="#🧩-后续拓展方向-欢迎关注" aria-label="Permalink to &quot;🧩 后续拓展方向，欢迎关注&quot;">​</a></h2><ol><li>使用Nodejs调用大漠插件：📊图文识别</li><li>使用Nodejs调用易键鼠的双头盒子dll: ⌨️虚拟输入</li><li>大型网游实战🚀</li></ol><h2 id="🏁-总结" tabindex="-1">🏁 总结 <a class="header-anchor" href="#🏁-总结" aria-label="Permalink to &quot;🏁 总结&quot;">​</a></h2><p>通过 <code>Node.js + memoryjs</code>，即使是纯前端背景的开发者也可以轻松进入<strong>内存脚本开发的世界</strong>。利用现代 JS 工具链，我们可以封装一个安全、可维护的辅助工具。</p><hr><p>如果你也想使用Nodejs来编写游戏修改器或者游戏脚本，欢迎一起讨论！</p><p><img src="`+t+'" alt="QQ群"></p><hr><h2 id="附录" tabindex="-1">附录 <a class="header-anchor" href="#附录" aria-label="Permalink to &quot;附录&quot;">​</a></h2><ul><li>修改器Demo仓库：<a href="https://github.com/chinjiaqing/pvz-tools" target="_blank" rel="noreferrer">https://github.com/chinjiaqing/pvz-tools</a></li><li>游戏下载地址：<a href="https://www.32r.com/soft/110449.html" target="_blank" rel="noreferrer">https://www.32r.com/soft/110449.html</a></li></ul><h3 id="如何运行demo" tabindex="-1">如何运行demo <a class="header-anchor" href="#如何运行demo" aria-label="Permalink to &quot;如何运行demo&quot;">​</a></h3><ol><li>克隆仓库<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/chinjiaqing/pvz-tools.git</span></span></code></pre></div></li><li>安装依赖，推荐使用<code>yarn</code><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div></li><li>运行<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div></li><li>打包exe<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:win</span></span></code></pre></div></li></ol>',57)]))}const c=i(e,[["render",p]]);export{y as __pageData,c as default};
