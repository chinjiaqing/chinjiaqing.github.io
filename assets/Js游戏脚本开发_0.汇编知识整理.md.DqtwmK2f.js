import{_ as o,c as a,o as c,j as d,a2 as r,a as s,t as i}from"./chunks/framework.CHomSxuB.js";const P=JSON.parse('{"title":"汇编知识整理","description":"汇编知识整理","frontmatter":{"title":"汇编知识整理","description":"汇编知识整理","editLink":false},"headers":[],"relativePath":"Js游戏脚本开发/0.汇编知识整理.md","filePath":"Js游戏脚本开发/0.汇编知识整理.md"}'),l={name:"Js游戏脚本开发/0.汇编知识整理.md"},h={id:"frontmatter-title",tabindex:"-1"};function n(e,t,p,b,x,E){return c(),a("div",null,[d("h1",h,[s(i(e.$frontmatter.title)+" ",1),t[0]||(t[0]=d("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),t[1]||(t[1]=r(`<h2 id="字节术语" tabindex="-1">字节术语 <a class="header-anchor" href="#字节术语" aria-label="Permalink to &quot;字节术语&quot;">​</a></h2><table tabindex="0"><thead><tr><th>位数</th><th>术语</th><th>说明</th><th>常见数据类型</th></tr></thead><tbody><tr><td>8 位</td><td>BYTE</td><td>基本数据单位，1 字节</td><td><code>char</code></td></tr><tr><td>16 位</td><td>WORD</td><td>2 字节（通常是处理器的基本数据单位）</td><td><code>short</code></td></tr><tr><td>32 位</td><td>DWORD</td><td>4 字节（双字）</td><td><code>int</code> / <code>long</code></td></tr><tr><td>64 位</td><td>QWORD</td><td>8 字节（四字）</td><td><code>long long</code></td></tr><tr><td>128 位</td><td>Octa Word</td><td>16 字节（较少见，通常用于 SIMD）</td><td>SIMD 寄存器</td></tr><tr><td>256 位</td><td>YMM</td><td>32 字节，通常用于 SIMD（如 AVX2）</td><td>SIMD 寄存器</td></tr><tr><td>512 位</td><td>ZMM</td><td>64 字节，通常用于 SIMD（如 AVX-512）</td><td>SIMD 寄存器</td></tr></tbody></table><h2 id="通用寄存器" tabindex="-1">通用寄存器： <a class="header-anchor" href="#通用寄存器" aria-label="Permalink to &quot;通用寄存器：&quot;">​</a></h2><table tabindex="0"><thead><tr><th>32 位 (x86)</th><th>64 位 (x64)</th><th>主要用途</th><th>调用约定中的特殊用途</th></tr></thead><tbody><tr><td>EAX</td><td>RAX</td><td>累加寄存器，用于算术运算、I/O 操作</td><td><span class="emp">Windows 中通常存放函数返回值</span></td></tr><tr><td>EBX</td><td>RBX</td><td>基址寄存器，指向数组或数据结构的基址</td><td>通常无特殊约定，需在函数调用中保存</td></tr><tr><td>ECX</td><td>RCX</td><td>计数寄存器，用于循环计数器或移位操作</td><td><span class="emp">Fastcall 中存放第一个参数</span>；C++ 成员函数的 <code>this</code> 指针（MSVC 约定）</td></tr><tr><td>EDX</td><td>RDX</td><td>数据寄存器，存储乘法/除法的结果或 I/O 相关</td><td>Fastcall 中存放第二个参数</td></tr><tr><td>ESI</td><td>RSI</td><td>源索引寄存器，指向字符串/数组操作的源操作数</td><td>通常无特殊约定，需在函数调用中保存</td></tr><tr><td>EDI</td><td>RDI</td><td>目的索引寄存器，指向字符串/数组操作的目标操作数</td><td>通常无特殊约定，需在函数调用中保存</td></tr><tr><td>EBP</td><td>RBP</td><td>基指针寄存器，保存栈帧的基地址（栈底）</td><td>用于访问函数参数和局部变量；需在函数调用中保存</td></tr><tr><td>ESP</td><td>RSP</td><td>堆栈指针寄存器，指向当前栈顶位置</td><td>始终跟踪栈顶位置，涉及堆栈平衡</td></tr><tr><td>-</td><td>R8</td><td>64 位新增寄存器</td><td>Fastcall 中存放第三个参数</td></tr><tr><td>-</td><td>R9</td><td>64 位新增寄存器</td><td>Fastcall 中存放第四个参数</td></tr><tr><td>-</td><td>R10~R15</td><td>64 位新增寄存器</td><td>通用用途；部分约定中需由调用者保存（如 R10、R11）</td></tr></tbody></table><h2 id="标志寄存器" tabindex="-1">标志寄存器 <a class="header-anchor" href="#标志寄存器" aria-label="Permalink to &quot;标志寄存器&quot;">​</a></h2><p>标志寄存器用于存储 CPU 执行操作后的状态信息，包含一个或多个标志位。标志寄存器的常见用途是在条件跳转（如 <code>JZ</code>、<code>JC</code>）中作为判断依据。</p><table tabindex="0"><thead><tr><th>标志位</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td><code>CF</code></td><td>进位标志（Carry Flag）</td><td>表示加法或移位操作是否产生进位</td></tr><tr><td><code>ZF</code></td><td>零标志（Zero Flag）</td><td>表示结果是否为零</td></tr><tr><td><code>SF</code></td><td>符号标志（Sign Flag）</td><td>表示运算结果的符号位</td></tr><tr><td><code>OF</code></td><td>溢出标志（Overflow Flag）</td><td>表示加法或减法是否发生了溢出</td></tr><tr><td><code>PF</code></td><td>偶校验标志（Parity Flag）</td><td>用于检查结果是否具有偶数个 1</td></tr><tr><td><code>DF</code></td><td>方向标志（Direction Flag）</td><td>用于字符串操作时的方向控制（增量或减量）</td></tr><tr><td><code>AF</code></td><td>辅助进位标志（Auxiliary Carry Flag）</td><td>用于 BCD 运算</td></tr></tbody></table><h2 id="栈理解" tabindex="-1">栈理解 <a class="header-anchor" href="#栈理解" aria-label="Permalink to &quot;栈理解&quot;">​</a></h2><h3 id="栈结构" tabindex="-1">栈结构 <a class="header-anchor" href="#栈结构" aria-label="Permalink to &quot;栈结构&quot;">​</a></h3><ol><li>只有一个出口</li><li>数据只能从顶端入栈</li><li>先进后出</li></ol><h3 id="栈的基本操作" tabindex="-1">栈的基本操作 <a class="header-anchor" href="#栈的基本操作" aria-label="Permalink to &quot;栈的基本操作&quot;">​</a></h3><ol><li>PUSH 入栈</li><li>POP 出栈</li></ol><p>放入数据后，都是 ESP（栈顶）在变化。EBP（栈底）就是地基。</p><h3 id="栈地址变化" tabindex="-1">栈地址变化 <a class="header-anchor" href="#栈地址变化" aria-label="Permalink to &quot;栈地址变化&quot;">​</a></h3><ul><li>不断 PUSH 数据，栈地址不断变小</li><li>不断 POP 数据，栈地址不断变大</li></ul><h3 id="栈代码理解" tabindex="-1">栈代码理解 <a class="header-anchor" href="#栈代码理解" aria-label="Permalink to &quot;栈代码理解&quot;">​</a></h3><div class="language-asm vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">asm</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eax</span></span></code></pre></div><ol><li>先 ESP = ESP - 4</li><li>再修改 [ESP] = 3</li></ol><h2 id="栈操作指令" tabindex="-1">栈操作指令 <a class="header-anchor" href="#栈操作指令" aria-label="Permalink to &quot;栈操作指令&quot;">​</a></h2><table tabindex="0"><thead><tr><th>指令</th><th>功能描述</th><th>栈指针变化 (ESP)</th></tr></thead><tbody><tr><td><div class="w-30"><code>PUSH</code></div></td><td>将寄存器值、立即数或内存操作数压入栈顶。例：<code>PUSH EAX</code> 或 <code>PUSH 5</code>。</td><td><code>ESP -= 4</code></td></tr><tr><td><code>POP</code></td><td>将栈顶值弹出并存入寄存器或内存操作数。例：<code>POP EAX</code>。</td><td><code>ESP += 4</code></td></tr><tr><td><code>PUSHAD</code></td><td>按顺序将通用寄存器（<code>EAX</code>，<code>ECX</code>，<code>EDX</code>，<code>EBX</code>，<code>ESP</code>，<code>EBP</code>，<code>ESI</code>，<code>EDI</code>）的值压入栈。</td><td><code>ESP -= 32</code></td></tr><tr><td><code>POPAD</code></td><td>按顺序从栈中弹出值恢复到通用寄存器（<code>EDI</code>，<code>ESI</code>，<code>EBP</code>，<code>ESP</code>（跳过），<code>EBX</code>，<code>EDX</code>，<code>ECX</code>，<code>EAX</code>）。</td><td><code>ESP += 32</code></td></tr><tr><td><code>PUSHFD</code></td><td>将 32 位标志寄存器（<code>EFLAGS</code>）压入栈。</td><td><code>ESP -= 4</code></td></tr><tr><td><code>POPFD</code></td><td>从栈中弹出值并恢复到 32 位标志寄存器（<code>EFLAGS</code>）。</td><td><code>ESP += 4</code></td></tr><tr><td><code>CALL 地址</code></td><td>调用子程序，将当前指令的返回地址压入栈顶，然后跳转到目标地址。</td><td><code>ESP -= 4</code></td></tr><tr><td><code>RET</code></td><td>从栈中弹出返回地址并跳转到该地址。</td><td><code>ESP += 4</code> (或更多)</td></tr><tr><td><code>ENTER</code></td><td>设置栈帧：将当前 <code>EBP</code> 压入栈，然后设置新的 <code>EBP</code> 并为局部变量分配空间。</td><td></td></tr><tr><td><code>LEAVE</code></td><td>恢复栈帧：将 <code>EBP</code> 的值恢复到 <code>ESP</code>，然后弹出原 <code>EBP</code>。</td><td><code>ESP +=</code> 局部变量大小</td></tr><tr><td><code>INT imm8</code></td><td>软中断：将标志寄存器、代码段（<code>CS</code>）和指令指针（<code>EIP</code>）压入栈。</td><td><code>ESP -= 12</code>（假设是 32 位系统）</td></tr></tbody></table><h2 id="数据传输指令" tabindex="-1">数据传输指令 <a class="header-anchor" href="#数据传输指令" aria-label="Permalink to &quot;数据传输指令&quot;">​</a></h2><table tabindex="0"><thead><tr><th>操作符</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>mov</code></td><td>将数据从源的位置传输到目的位置</td><td><code>mov eax, ebx</code></td></tr><tr><td><code>push</code></td><td>将数据压入栈</td><td><code>push eax</code></td></tr><tr><td><code>pop</code></td><td>从栈中弹出数据到目的位置</td><td><code>pop eax</code></td></tr><tr><td><code>xchg</code></td><td>交换两个操作数的值</td><td><code>xchg eax, ebx</code></td></tr><tr><td><code>lea</code></td><td>取地址</td><td><code>lea eax, [ebx + 4]</code></td></tr></tbody></table><h2 id="fs-段寄存器" tabindex="-1">FS 段寄存器 <a class="header-anchor" href="#fs-段寄存器" aria-label="Permalink to &quot;FS 段寄存器&quot;">​</a></h2><h3 id="windows-中-fs-段寄存器" tabindex="-1">Windows 中 <code>fs</code> 段寄存器 <a class="header-anchor" href="#windows-中-fs-段寄存器" aria-label="Permalink to &quot;Windows 中 \`fs\` 段寄存器&quot;">​</a></h3><ul><li>在 Windows 里，<code>fs</code> 是段寄存器，用于指向线程的线程环境块（<strong>TEB</strong>，Thread Environment Block）。</li><li>主要用于访问当前线程的局部存储区域（而非全局数据），让线程高效存储和访问专有的信息，不需要锁定整个进程的数据。</li></ul><h3 id="_32-位-windows-中-fs-寄存器情况" tabindex="-1">32 位 Windows 中 <code>fs</code> 寄存器情况 <a class="header-anchor" href="#_32-位-windows-中-fs-寄存器情况" aria-label="Permalink to &quot;32 位 Windows 中 \`fs\` 寄存器情况&quot;">​</a></h3><ul><li><code>fs</code> 寄存器的默认值指向当前线程的 TEB 地址。</li><li><code>fs:[0]</code> 存储着当前<span class="emp">线程的 TEB 的基地址</span>，通常用于获取该线程的相关信息。</li></ul><h3 id="teb-线程环境块" tabindex="-1">TEB（线程环境块） <a class="header-anchor" href="#teb-线程环境块" aria-label="Permalink to &quot;TEB（线程环境块）&quot;">​</a></h3><ul><li><strong>定义</strong>：为每个线程分配的数据结构。</li><li><strong>用途</strong>：存储线程相关信息。</li><li><strong>特性</strong>：每个线程有独立的 TEB。</li><li><strong>存储信息</strong>：包括线程的本地存储、异常处理、TLS（线程局部存储）、栈指针等。</li><li><strong>获取 TEB 指针方式</strong>：每个线程通过 <code>fs:[0]</code> 获取指向其 TEB 的指针。</li></ul><h2 id="peb-与-teb" tabindex="-1">PEB 与 TEB <a class="header-anchor" href="#peb-与-teb" aria-label="Permalink to &quot;PEB 与 TEB&quot;">​</a></h2><h3 id="peb-每个进程在-windows-系统中都有的一个数据结构-包含了进程相关的重要信息。" tabindex="-1">PEB: 每个进程在 Windows 系统中都有的一个数据结构，包含了进程相关的重要信息。 <a class="header-anchor" href="#peb-每个进程在-windows-系统中都有的一个数据结构-包含了进程相关的重要信息。" aria-label="Permalink to &quot;PEB: 每个进程在 Windows 系统中都有的一个数据结构，包含了进程相关的重要信息。&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typedef</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> struct</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _PEB</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  UCHAR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BeingDebugged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//+0x002</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 是否正在调试</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  UCHAR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NtGlobalFlag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">//+0x068</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} PEB</span></span></code></pre></div><h2 id="算数运算指令" tabindex="-1">算数运算指令 <a class="header-anchor" href="#算数运算指令" aria-label="Permalink to &quot;算数运算指令&quot;">​</a></h2><table tabindex="0"><thead><tr><th>操作符</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>add</code></td><td>加法</td><td><code>add eax, ebx</code></td></tr><tr><td><code>sub</code></td><td>减法</td><td><code>sub eax, ecx</code></td></tr><tr><td><code>mul</code></td><td>无符号乘法</td><td><code>mul ecx</code></td></tr><tr><td><code>imul</code></td><td>有符号乘法</td><td><code>imul eax, ecx</code></td></tr><tr><td><code>div</code></td><td>无符号除法</td><td><code>div ecx</code></td></tr><tr><td><code>idiv</code></td><td>有符号除法</td><td><code>idiv ecx</code></td></tr><tr><td><code>inc</code></td><td>自增</td><td><code>inc eax</code></td></tr><tr><td><code>dec</code></td><td>自减</td><td><code>dec eax</code></td></tr><tr><td><code>cdq</code></td><td>设置有符号</td><td></td></tr></tbody></table><h2 id="位操作指令" tabindex="-1">位操作指令 <a class="header-anchor" href="#位操作指令" aria-label="Permalink to &quot;位操作指令&quot;">​</a></h2><table tabindex="0"><thead><tr><th>指令</th><th>说明</th><th>示例指令</th><th>计算逻辑</th></tr></thead><tbody><tr><td><code>and</code></td><td><div class="w-20">按位与</div></td><td><div class="w-26"><code>and eax, 0xFF</code></div></td><td>每一位相应的位都执行“与”操作：两个对应位都为 1 时，结果为 1，否则为 0。</td></tr><tr><td><code>or</code></td><td>按位或</td><td><code>or eax, ebx</code></td><td>每一位相应的位都执行“或”操作：两个对应位中，只要有一个为 1，结果为 1。</td></tr><tr><td><code>xor</code></td><td>按位异或</td><td><code>xor eax, ebx</code></td><td>每一位相应的位都执行“异或”操作：两个对应位不相同，结果为 1，否则为 0。</td></tr><tr><td><code>not</code></td><td>按位取反</td><td><code>not eax</code></td><td>将操作数的每一位都取反（1 变为 0，0 变为 1）。</td></tr><tr><td><code>shl</code></td><td>逻辑左移</td><td><code>shl eax, 1</code></td><td>将操作数向左移动指定的位数，低位补 0。例如左移 1 位相当于将数值乘以 2（在无溢出情况下）。</td></tr><tr><td><code>shr</code></td><td>逻辑右移</td><td><code>shr eax, 1</code></td><td>将操作数向右移动指定的位数，高位补 0。例如右移 1 位相当于将无符号数值除以 2（取商的整数部分）。</td></tr><tr><td><code>sal</code></td><td>算术左移</td><td><code>sal eax, 1</code></td><td>与逻辑左移 <code>shl</code> 操作相同，都是将操作数向左移动指定位数，低位补 0。</td></tr><tr><td><code>sar</code></td><td>算术右移</td><td><code>sar eax, 1</code></td><td>将操作数向右移动指定的位数，高位补符号位（即保持操作数的正负性不变）。例如对于有符号数，右移 1 位相当于进行算术除法除以 2（取商的整数部分）。</td></tr><tr><td><code>rol</code></td><td>循环左移</td><td><code>rol eax, 1</code></td><td>将操作数向左循环移动指定的位数，从最高位移出的位会重新移入最低位。例如，若 <code>eax</code> 的值为 <code>0b1010</code>（二进制），循环左移 1 位后变为 <code>0b0101</code>。</td></tr><tr><td><code>ror</code></td><td>循环右移</td><td><code>ror eax, 1</code></td><td>将操作数向右循环移动指定的位数，从最低位移出的位会重新移入最高位。例如，若 <code>eax</code> 的值为 <code>0b1010</code>（二进制），循环右移 1 位后变为 <code>0b0101</code>（这里假设是 4 位操作数示例，实际会根据寄存器位数等情况完整循环移位）。</td></tr></tbody></table><h2 id="逻辑比较指令" tabindex="-1">逻辑比较指令 <a class="header-anchor" href="#逻辑比较指令" aria-label="Permalink to &quot;逻辑比较指令&quot;">​</a></h2><table tabindex="0"><thead><tr><th>操作符</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><code>cmp</code></td><td>比较两个操作数</td><td><code>cmp eax, ebx</code></td></tr><tr><td><code>test</code></td><td>测试（与操作，不存结果，仅设置标志）</td><td><code>test eax, eax</code></td></tr></tbody></table><p><code>CMP</code> 和 <code>TEST</code> 都是常见的汇编指令，尤其在 Windows 逆向工程中经常用来进行条件判断和标志位操作。它们的主要区别在于如何影响标志寄存器以及如何使用它们来控制程序的流程。</p><ul><li><strong><code>cmp</code> 指令</strong>：通过执行减法运算（但不存储结果）来比较两个操作数，根据运算结果设置标志寄存器（如 <code>ZF</code>（零标志位）、<code>SF</code>（符号标志位）、<code>CF</code>（进位标志位）等），后续可以根据这些标志位进行条件跳转等操作，判断两个操作数的大小关系等（例如判断 <code>eax</code> 和 <code>ebx</code> 谁大谁小或者是否相等）。</li><li><strong><code>test</code> 指令</strong>：执行按位与操作（同样不存储结果），主要目的是检查操作数的某些位是否为特定值（比如全为 0 等），根据与操作结果设置标志寄存器（最常用判断 <code>ZF</code> 标志位来看与操作结果是否为 0），例如 <code>test eax, eax</code> 常用来判断 <code>eax</code> 是否为 0（如果 <code>eax</code> 为 0，与操作结果为 0，<code>ZF</code> 置 1；否则 <code>ZF</code> 置 0）。</li></ul><h2 id="控制转移指令" tabindex="-1">控制转移指令 <a class="header-anchor" href="#控制转移指令" aria-label="Permalink to &quot;控制转移指令&quot;">​</a></h2><table tabindex="0"><thead><tr><th>操作符</th><th>功能</th><th>示例</th></tr></thead><tbody><tr><td><span class="emp">jmp</span></td><td>无条件跳转</td><td><code>jmp 0x00401000</code></td></tr><tr><td><code>call</code></td><td>调用子程序</td><td><code>call 0x00401000</code></td></tr><tr><td><code>ret</code></td><td>返回到调用点</td><td><code>ret</code></td></tr><tr><td><code>je / jz</code></td><td>如果相等（Zero flag 置位）跳转</td><td><code>je 0x00401020</code></td></tr><tr><td><code>jne / jnz</code></td><td>如果不等（Zero flag 未置位）跳转</td><td><code>jne 0x00401020</code></td></tr><tr><td><code>jg</code></td><td>如果大于跳转</td><td><code>jg 0x00401020</code></td></tr><tr><td><code>jl</code></td><td>如果小于跳转</td><td><code>jl 0x00401020</code></td></tr><tr><td><code>jge</code></td><td>如果大于等于跳转</td><td><code>jge 0x00401020</code></td></tr><tr><td><code>jle</code></td><td>如果小于等于跳转</td><td><code>jle 0x00401020</code></td></tr><tr><td><code>loop</code></td><td>循环跳转</td><td><code>loop 0x00401020</code></td></tr><tr><td><code>int</code></td><td>调用中断</td><td><code>int 0x80</code></td></tr><tr><td><code>iret</code></td><td>从中断返回</td><td><code>iret</code></td></tr></tbody></table>`,42))])}const u=o(l,[["render",n]]);export{P as __pageData,u as default};
